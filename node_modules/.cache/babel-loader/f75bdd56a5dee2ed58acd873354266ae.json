{"ast":null,"code":"var _jsxFileName = \"/Users/oleksandr/Documents/IT/_REACT/React-homeworks/src/Components/App.js\";\nimport React, { Component } from \"react\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport Toggler from \"./Toggler/Toggler\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      contacts: [],\n      filter: \"\"\n    };\n\n    this.addContact = _ref => {\n      let {\n        name,\n        number\n      } = _ref;\n      const checkOnExist = this.state.contacts.find(contact => contact.name === name);\n\n      const checkLength = string => string.length < 1;\n\n      const contact = {\n        id: uuidv4(),\n        name,\n        number\n      };\n\n      if (checkLength(`${name}`) || checkLength(`${number}`)) {\n        alert(\"Please, fill in all required entry fields\");\n        return;\n      }\n\n      if (checkOnExist) {\n        alert(`${name} is already in contacts`);\n        return;\n      }\n\n      this.setState(prevState => {\n        return {\n          contacts: [...prevState.contacts, contact]\n        };\n      });\n    };\n\n    this.removeContact = contactId => {\n      this.setState(prevState => {\n        return {\n          contacts: prevState.contacts.filter(_ref2 => {\n            let {\n              id\n            } = _ref2;\n            return id !== contactId;\n          })\n        };\n      });\n    };\n\n    this.changeFilter = filter => {\n      this.setState({\n        filter\n      });\n    };\n\n    this.getFilteredContacts = () => {\n      const {\n        contacts,\n        filter\n      } = this.state;\n      return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    };\n  }\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\");\n\n    if (persistedContacts) {\n      this.setState({\n        contacts: JSON.parse(persistedContacts)\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const {\n      filter,\n      contacts\n    } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Phonebook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        addContact: this.addContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), contacts.length >= 2 && /*#__PURE__*/_jsxDEV(Filter, {\n        value: filter,\n        onChangeFilter: this.changeFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Toggler, {\n        children: _ref3 => {\n          let {\n            isOpen,\n            toggle\n          } = _ref3;\n          return /*#__PURE__*/_jsxDEV(ContactList, {\n            contacts: filteredContacts,\n            onRemoveContact: this.removeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","Component","ContactForm","ContactList","Filter","Toggler","v4","uuidv4","App","state","contacts","filter","addContact","name","number","checkOnExist","find","contact","checkLength","string","length","id","alert","setState","prevState","removeContact","contactId","changeFilter","getFilteredContacts","toLowerCase","includes","componentDidMount","persistedContacts","localStorage","getItem","JSON","parse","componentDidUpdate","prevProps","setItem","stringify","render","filteredContacts","isOpen","toggle"],"sources":["/Users/oleksandr/Documents/IT/_REACT/React-homeworks/src/Components/App.js"],"sourcesContent":["import React, { Component } from \"react\";\n\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport Toggler from \"./Toggler/Toggler\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\");\n    if (persistedContacts) {\n      this.setState({\n        contacts: JSON.parse(persistedContacts),\n      });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const checkOnExist = this.state.contacts.find(\n      (contact) => contact.name === name\n    );\n\n    const checkLength = (string) => string.length < 1;\n\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    if (checkLength(`${name}`) || checkLength(`${number}`)) {\n      alert(\"Please, fill in all required entry fields\");\n      return;\n    }\n\n    if (checkOnExist) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    this.setState((prevState) => {\n      return {\n        contacts: [...prevState.contacts, contact],\n      };\n    });\n  };\n  removeContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n  changeFilter = (filter) => {\n    this.setState({ filter });\n  };\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={this.addContact} />\n        <h2>Contacts</h2>\n        {contacts.length >= 2 && (\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        )}\n        {/* <Toggler\n          render={({ isOpen, toggle }) => (\n            <ContactList\n              contacts={filteredContacts}\n              onRemoveContact={this.removeContact}\n            />\n          )}\n        /> */}\n        <Toggler>\n          {({ isOpen, toggle }) => (\n            <ContactList\n              contacts={filteredContacts}\n              onRemoveContact={this.removeContact}\n            />\n          )}\n        </Toggler>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}